{"version":3,"sources":["Grid.js","App.js","serviceWorker.js","index.js"],"names":["GridContainer","styled","div","Cell","P","p","CellWrapper","useState","isSelected","setIsSelected","className","onClick","console","log","Grid","Array","from","map","li","i","key","H1","h1","PageWrapper","Content","section","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6yDAGA,IAAMA,EAAgBC,IAAOC,IAAV,KASbC,EAAOF,IAAOC,IAAV,KA6CJE,EAAIH,IAAOI,EAAV,KAUP,SAASC,IAAe,IAAD,EACeC,oBAAS,GADxB,mBACdC,EADc,KACFC,EADE,KAErB,OACE,kBAACN,EAAD,CAAMO,UAAWF,EAAa,WAAa,GAAIG,QAAS,WACtDF,GAAeD,GACfI,QAAQC,IAAIL,KAEZ,kBAACJ,EAAD,gBAaSU,MARf,WACE,OACE,kBAACd,EAAD,KACGe,MAAMC,KAAKD,MAAM,KAAKE,KAAI,SAACC,EAAIC,GAAL,OAAY,kBAACb,EAAD,CAAac,IAAKD,S,8/BC9E/D,IAAME,EAAKpB,IAAOqB,GAAV,KAmBFC,EAActB,IAAOC,IAAV,KAcXsB,EAAUvB,IAAOwB,QAAV,KAsBEC,MAXf,WACE,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,KACE,kBAACH,EAAD,KAAI,8BAAM,mCAAN,IAAqB,uCAArB,IAAwC,uCAAxC,IAA2D,qCAA/D,IAAsF,8BAAM,qCAAN,IAAuB,wCAAvB,IAAsC,4CAE9H,kBAAC,EAAD,QC1CcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.3945b61d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\n\nconst GridContainer = styled.div`\n  display: grid;\n  flex-grow: 1;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  @media only screen and (max-width: 868px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\nconst Cell = styled.div`\n  &&.selected {\n    grid-row: span 3;\n    grid-column: span 2;\n  }\n  border-radius: 50%;\n  display: flex;\n  :nth-child(1) {\n    background: radial-gradient(whitesmoke, pink);\n  }\n  :nth-child(2) {\n    background: radial-gradient(whitesmoke, blueviolet);\n  }\n  :nth-child(3) {\n    background: radial-gradient(whitesmoke, gold);\n  }\n  :nth-child(4) {\n    background: radial-gradient(lavender, mediumpurple);\n  }\n  :nth-child(5) {\n    background: radial-gradient(linen, fuchsia);\n  }\n  :nth-child(6) {\n    background: radial-gradient(whitesmoke, orange);\n  }\n  :nth-child(7) {\n    background: radial-gradient(seashell, orangered);\n  }\n  :nth-child(8) {\n    background: radial-gradient(whitesmoke, palevioletred);\n  }\n  :nth-child(9) {\n    background: radial-gradient(wheat, orangered);\n  }\n  :nth-child(10) {\n    background: radial-gradient(linen, orchid);\n  }\n  :nth-child(11) {\n    background: radial-gradient(whitesmoke, slateblue);\n  }\n  :nth-child(12) {\n    background: radial-gradient(linen, deeppink);\n  }\n`;\n\nconst P = styled.p`\n  color: white;\n  font-size: 2.5rem;\n  text-align: justify;\n  line-height: 1.1;\n  @media only screen and (max-width: 868px) {\n    font-size: 2rem;\n  }\n`;\n\nfunction CellWrapper() {\n  const [isSelected, setIsSelected] = useState(false);\n  return (\n    <Cell className={isSelected ? 'selected' : ''} onClick={() => {\n      setIsSelected(!isSelected)\n      console.log(isSelected)\n    }}>\n      <P>✿</P>\n    </Cell>\n  );\n}\n\nfunction Grid() {\n  return (\n    <GridContainer>\n      {Array.from(Array(12)).map((li, i) => (<CellWrapper key={i} />))}\n    </GridContainer>\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Grid from './Grid';\n\nconst H1 = styled.h1`\n  text-transform: uppercase;\n  font-size: 3.5rem;\n  text-align: justify;\n  line-height: 1.1;\n  span {\n    color: lightyellow;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    span {\n      margin-right: 1rem;\n    }\n  }\n  @media only screen and (max-width: 868px) {\n    font-size: 1.75rem;\n  }\n`;\n\nconst PageWrapper = styled.div`\n  background-color: #c78cd2;\n  /* border-radius: 50%; */\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-between; */\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  @media only screen and (max-width: 868px) {\n    flex-wrap: wrap;\n  }\n`;\n\nconst Content = styled.section`\n  padding-left: 1rem;\n  flex-grow: 1;\n  /* min-height: 200px; */\n  /* width: 50vw; */\n  /* margin-top: 10vh; */\n  @media only screen and (max-width: 868px) {\n    width: 100vw;\n  }\n`;\n\nfunction App() {\n  return (\n    <PageWrapper>\n      <Content>\n        <H1><span><span>A</span> <span>Small</span> <span>Guide</span> <span>to</span></span> <span><span>Cut</span> <span>✿</span> <span>Flowers</span></span></H1>\n      </Content>\n      <Grid />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}