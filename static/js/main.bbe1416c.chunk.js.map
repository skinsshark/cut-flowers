{"version":3,"sources":["flowers.jpg","phlox.jpg","Info.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","P","styled","p","Info","props","currFlower","H1","h1","PageWrapper","div","Content","section","ImageWrapper","article","setImage","console","log","phlox","flowers","App","useState","setCurrFlower","onClick","src","alt","useMap","name","title","href","coords","shape","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,6YCG3C,IAAMC,EAAIC,IAAOC,EAAV,KAiBQC,MAPf,SAAcC,GAAQ,IACZC,EAAeD,EAAfC,WACR,OACE,kBAACL,EAAD,KAAIK,I,0nCCTR,IAAMC,EAAKL,IAAOM,GAAV,KAmBFC,EAAcP,IAAOQ,IAAV,KAYXC,EAAUT,IAAOU,QAAV,KASPC,EAAeX,IAAOY,QAAV,KAUlB,SAASC,EAAST,GAEhB,OADAU,QAAQC,IAAI,MACJX,GACN,IAAK,QACH,OAAOY,IACT,QACE,OAAOC,KAsBEC,MAlBf,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACNf,EADM,KACMgB,EADN,KAGb,OACE,kBAACb,EAAD,KACE,kBAACE,EAAD,KACE,kBAACJ,EAAD,KAAI,8BAAM,mCAAN,IAAqB,uCAArB,IAAwC,uCAAxC,IAA2D,qCAA/D,IAAsF,8BAAM,qCAAN,IAAuB,wCAAvB,IAAsC,2CAC5H,kBAAC,EAAD,CAAMD,WAAYA,KAEpB,kBAACO,EAAD,KAAc,yBAAKU,QAAS,kBAAMD,EAAc,UAAUE,IAAKT,EAAST,GAAamB,IAAI,4BAA4BC,OAAO,gBAE5H,yBAAKC,KAAK,cACR,0BAAMJ,QAAS,kBAAMD,EAAc,UAAUG,IAAI,QAAQG,MAAM,QAAQC,KAAK,SAASC,OAAO,kJAAkJC,MAAM,YCnExOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.bbe1416c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flowers.e6deadee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/phlox.247e7705.jpg\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst P = styled.p`\n  color: lightyellow;\n  font-size: 3.5rem;\n  text-align: justify;\n  line-height: 1.1;\n  @media only screen and (max-width: 868px) {\n    font-size: 2rem;\n  }\n`;\n\nfunction Info(props) {\n  const { currFlower } = props;\n  return (\n    <P>{currFlower}</P>\n  );\n}\n\nexport default Info;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Info from './Info';\n\nimport flowers from './flowers.jpg';\nimport phlox from './phlox.jpg';\n\nconst H1 = styled.h1`\n  text-transform: uppercase;\n  font-size: 3.5rem;\n  text-align: justify;\n  line-height: 1.1;\n  span {\n    color: lightyellow;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    span {\n      margin-right: 1rem;\n    }\n  }\n  @media only screen and (max-width: 868px) {\n    font-size: 1.75rem;\n  }\n`;\n\nconst PageWrapper = styled.div`\n  background-color: fuchsia;\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: space-between;\n  width: 100vw;\n  height: 100vh;\n  @media only screen and (max-width: 868px) {\n    flex-wrap: wrap;\n  }\n`;\n\nconst Content = styled.section`\n  padding-left: 1rem;\n  flex-grow: 1;\n  min-height: 200px;\n  @media only screen and (max-width: 868px) {\n    width: 100vw;\n  }\n`;\n\nconst ImageWrapper = styled.article`\n  img {\n    height: 100vh;\n    @media only screen and (max-width: 868px) {\n      height: auto;\n      width: 100vw;\n    }\n  }\n`;\n\nfunction setImage(currFlower) {\n  console.log('yo')\n  switch (currFlower) {\n    case 'phlox':\n      return phlox;\n    default:\n      return flowers;\n  }\n}\n\nfunction App() {\n  const [currFlower, setCurrFlower] = useState(null);\n\n  return (\n    <PageWrapper>\n      <Content>\n        <H1><span><span>A</span> <span>Small</span> <span>Guide</span> <span>to</span></span> <span><span>Cut</span> <span>âœ¿</span> <span>Flowers</span></span></H1>\n        <Info currFlower={currFlower} />\n      </Content>\n      <ImageWrapper><img onClick={() => setCurrFlower('phlox')} src={setImage(currFlower)} alt=\"all the beautiful flowers\" useMap=\"flower-map\" /></ImageWrapper>\n      {/*this really doesnt work w responsive sites gah*/}\n      <map name=\"flower-map\">\n        <area onClick={() => setCurrFlower('phlox')} alt=\"phlox\" title=\"phlox\" href=\"#phlox\" coords=\"454,670,455,680,466,684,469,680,472,683,480,683,485,675,483,671,489,668,490,660,482,654,479,655,478,648,472,645,470,656,466,661,463,667,459,664\" shape=\"poly\" />\n      </map>\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}